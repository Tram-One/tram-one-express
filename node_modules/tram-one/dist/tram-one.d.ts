declare const TRAM_TAG = "tram-tag";
declare const TRAM_TAG_REACTION = "tram-tag-reaction";
declare const TRAM_TAG_STORE_KEYS = "tram-tag-store-keys";
declare const TRAM_TAG_NEW_EFFECTS = "tram-tag-new-effects";
declare const TRAM_TAG_CLEANUP_EFFECTS = "tram-tag-cleanup-effects";

/**
 * Type for when we can take a CSS Selector, or an HTML Element (mostly mounting).
 */
declare type ElementOrSelector = [string | HTMLElement][0];
/**
 * Type for our template renderers (either html or svg).
 * This is not wrapped in an indexed alias, because everything should be provided automatically.
 */
declare type DOMTaggedTemplateFunction = (strings: TemplateStringsArray, ...elementsAndAttributes: any[]) => TramOneElement;
/**
 * Type for custom Tram One Components.
 * They can take in props and children, and return some rendered Element.
 */
declare type TramOneComponent<PropsInterface extends Props = Props, ChildrenInterface extends Children = Children> = [
    (props: PropsInterface, children: ChildrenInterface) => TramOneElement
][0];
/**
 * Type for useStore and useGlobalStore hooks.
 * Describes the kinds of values you can store, either an array or an object.
 *
 * Note, for useGlobalStore, you may have an unknown object if you didn't pass in a defaultValue,
 * that is because we can't determine what type it is, and we will rely on you to clarify.
 */
declare type StoreObject = [{
    [key: string]: any;
} | any[]][0];
/**
 * Type to describe the output of Effect.
 * Really this is just an annotation to make TramOneElement easier to understand.
 * In reality, this can be a function (to run on removal), or could be nothing.
 */
declare type CleanupEffect = [() => unknown][0];
/**
 * Type for the effect function.
 * This is passed into the useEffect hook
 */
declare type Effect = [() => unknown][0];
/**
 * The Props interface for custom Tram One Components.
 * These are all user defined, if any
 */
declare type Props = [
    {
        [attribute: string]: any;
    }
][0];
/**
 * The Children interface for custom Tram One Components.
 * If the tag is self-closing, it will be `undefined`, otherwise it will
 * be a list of strings and DOM Elements
 */
declare type Children = [(Element | string)[] | undefined][0];
/**
 * Type for registering Tram One Components in the template interface.
 * This is used in registerHtml and registerSvg.
 */
declare type Registry = [
    {
        [tag: string]: TramOneComponent<any, any>;
    }
][0];
/**
 * Type for useUrlParams, which contains a `matches` property,
 * and a set of key - value pairs (for query and path parameters)
 */
declare type UrlMatchResults = [
    {
        matches: boolean;
        [parameter: string]: string | boolean;
    }
][0];
/**
 * Type for an element that has Tram-One attributes.
 * See `./node-names.ts` for more details
 */
interface TramOneElement extends Element {
    [TRAM_TAG]: boolean;
    [TRAM_TAG_REACTION]: Reaction;
    [TRAM_TAG_NEW_EFFECTS]: Effect[];
    [TRAM_TAG_CLEANUP_EFFECTS]: CleanupEffect[];
    [TRAM_TAG_STORE_KEYS]: string[];
}
/**
 * Type for the Root TramOneComponent,
 * it can have no props or children, since it is the root element
 */
declare type RootTramOneComponent = TramOneComponent<{
    [attribute: string]: never;
}, undefined>;
/**
 * Type for nx-js's observer-util.
 * This is really just an annotation to make TramOneElement easier to understand
 */
declare type Reaction = () => void;

/**
 * @name registerHtml
 * @link https://tram-one.io/#register-html
 * @description
 * Function to generate a tagged template function for XHTML / HTML.
 * Takes in a registry that allows you to import other tag functions and use them in your template string.
 *
 * @param registry map of tag names to functions, use this to use custom elements built in tram-one
 * @return tagged template function that builds HTML components
 */
declare const registerHtml: (registry?: {
    [tag: string]: (props: any, children: any) => TramOneElement;
} | undefined) => DOMTaggedTemplateFunction;
/**
 * @name registerSvg
 * @link https://tram-one.io/#register-svg
 * @description
 * Function to generate a tagged template function for SVG.
 *
 * @param registry map of tag names to functions, use this to use custom elements built in tram-one
 * @return tagged template function that builds SVG components
 */
declare const registerSvg: (registry?: {
    [tag: string]: (props: any, children: any) => TramOneElement;
} | undefined) => DOMTaggedTemplateFunction;

declare const _default$3: (effect: Effect) => void;

declare const _default$2: (pattern: string) => UrlMatchResults;

declare const _default$1: <Store extends any[] | {
    [key: string]: any;
}>(defaultValue: Store) => Store;

/**
 * @name useGlobalObservable
 * @link https://tram-one.io/#use-global-observable
 * @description
 * Hook that stores global state and makes it accessible in the entire app.
 *
 * If the subfield of an object, or element of an array is updated
 * it will cause only the components that are dependent on that value to update.
 *
 * @param key a unique string to write and read the global value
 * @param defaultValue the default value to start the store at
 *
 * @returns the store to interact with.
 */
declare function useGlobalStore<Store extends StoreObject>(key: string, defaultValue: Store): Store;
/**
 * @name useGlobalObservable
 * @link https://tram-one.io/#use-global-observable
 * @description
 * Hook that stores global state and makes it accessible in the entire app.
 *
 * If the subfield of an object, or element of an array is updated
 * it will cause only the components that are dependent on that value to update.
 *
 * @param key a unique string to write and read the global value
 *
 * @returns the store to interact with.
 */
declare function useGlobalStore(key: string): unknown;

declare const _default: (component: RootTramOneComponent, target: ElementOrSelector) => void;

export { CleanupEffect, DOMTaggedTemplateFunction, Effect, ElementOrSelector, Props, Registry, StoreObject, TramOneComponent, TramOneElement, UrlMatchResults, registerHtml, registerSvg, _default as start, _default$3 as useEffect, useGlobalStore, _default$1 as useStore, _default$2 as useUrlParams };
